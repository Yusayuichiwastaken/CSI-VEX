<<<<<<< Updated upstream:VEX-V5/Four-Bar-Boy-1/C++/Four-Bar-1_RIght_1.v5cpp
{
    "mode": "Text",
    "textContent": "#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 340.36, 294.64, mm, 1.3333333333333333);\n\nmotor ArmMotorA = motor(PORT3, ratio18_1, false);\nmotor ArmMotorB = motor(PORT4, ratio18_1, true);\nmotor_group Arm = motor_group(ArmMotorA, ArmMotorB);\n\nmotor Rear_Lift = motor(PORT5, ratio18_1, false);\n\nmotor Clip = motor(PORT7, ratio18_1, true);\n\nmotor Front_Forklift = motor(PORT8, ratio18_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Clip\n      if (Controller1.ButtonL1.pressing()) {\n        Clip.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Clip.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Clip.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Arm\n      if (Controller1.ButtonR1.pressing()) {\n        Arm.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Arm.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Arm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control Rear_Lift\n      if (Controller1.ButtonUp.pressing()) {\n        Rear_Lift.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Rear_Lift.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Rear_Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Front_Forklift\n      if (Controller1.ButtonX.pressing()) {\n        Front_Forklift.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Front_Forklift.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Front_Forklift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {  \n  //Drivetrain \n  Drivetrain.setDriveVelocity(75,percent);\n  //Arm 800 Max Degrees\n  Arm.setMaxTorque(80.0, percent);\n  Arm.setVelocity(45.0, percent); \n  Arm.setStopping(hold); \n\n  //Front Forklift 800 Max Degrees\n  Front_Forklift.setVelocity(50,percent); \n  Front_Forklift.setMaxTorque(120,percent); \n  Front_Forklift.setStopping(hold); \n\n  //Rear Lift\n  Rear_Lift.setStopping(hold); \n  Rear_Lift.setVelocity(50,percent);  \n\n  //Clip\n  Clip.setVelocity(10,percent); \n  Clip.setStopping(hold);\n\n\n\n  return 0; \n\n}\n\n  //autonomus \nvoid autonomous1(){ \n  //Setup S\n  Clip.setPosition(0,degrees); \n  Rear_Lift.setPosition(0,degrees);  \n  Front_Forklift.setPosition(0,degrees);\n  Arm.setPosition(0,degrees);  \n  Drivetrain.setDriveVelocity(300,rpm);\n  //DriveTrain\n    /*Drivetrain.driveFor(reverse,8, inches); \n    Drivetrain.turnFor(right, 75, degrees); \n    Drivetrain.driveFor(reverse, 68, inches); \n    Drivetrain.driveFor(forward, 12, inches); \n    Arm.spinFor(reverse, 180, degrees); \n    Rear_Lift.spinFor(forward, 90, degrees); \n    Rear_Lift.spinFor(reverse, 90, degrees);*/\n\n\n    Clip.spinFor(forward, 120,degrees, false);\n    //Movement\n    Drivetrain.driveFor(reverse, 64, inches);\n    /*Drivetrain.turnFor(left, 45, degrees);\n    Drivetrain.driveFor(reverse, 22, inches);\n    Drivetrain.turnFor(right, 45, degrees);\n    Drivetrain.driveFor(reverse, 28, inches);*/\n    //Base Setup\n    Drivetrain.driveFor(forward, 15, inches);\n    Drivetrain.turnFor(left, 55, degrees);\n    //Preload Dump\n    Arm.spinFor(forward, 800, degrees, false);\n    Drivetrain.driveFor(forward, 8, inches);\n    Front_Forklift.spinFor(forward, 750, degrees);\n    Drivetrain.driveFor(reverse, 18, inches);\n    Drivetrain.turnFor(right, 10, degrees, false);\n    Arm.spinToPosition(0, degrees, false);\n    wait(0.60, seconds);\n    Front_Forklift.spinFor(reverse, 220, degrees);\n    Drivetrain.driveFor(forward, 27, inches);\n    Front_Forklift.spinFor(reverse, 250, degrees);\n    wait(0.5, seconds);\n    Drivetrain.driveFor(reverse, 10, inches);\n\n\n    \n}\n\nvoid driverControl1(){\n  whenStarted1();\n\n}\n\nint main() { \n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  whenStarted1(); \n    competition Competition; \n\n  whenStarted1(); \n  Competition.autonomous(autonomous1); \n  Competition.drivercontrol(driverControl1); \n  \n}\n",
    "textLanguage": "cpp",
    "rconfig": [
        {
            "port": [],
            "name": "Controller1",
            "customName": false,
            "deviceType": "Controller",
            "deviceClass": "controller",
            "setting": {
                "left": "Clip",
                "leftDir": "false",
                "right": "Arm",
                "rightDir": "false",
                "upDown": "Rear_Lift",
                "upDownDir": "false",
                "xB": "Front_Forklift",
                "xBDir": "false",
                "drive": "arcadel",
                "id": "primary"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                1,
                2,
                0
            ],
            "name": "Drivetrain",
            "customName": false,
            "deviceType": "Drivetrain",
            "deviceClass": "smartdrive",
            "setting": {
                "type": "2-motor",
                "wheelSize": "wheel4in",
                "gear": "ratio18_1",
                "gearRatio": "24:18",
                "direction": "fwd",
                "gyroType": "none",
                "width": "13.4",
                "unit": "in",
                "wheelbase": "11.6",
                "wheelbaseUnit": "in",
                "xOffset": "0",
                "xOffsetUnit": "mm",
                "yOffset": "0",
                "yOffsetUnit": "mm",
                "thetaOffset": "180"
            },
            "triportSourcePort": null
        },
        {
            "port": [
                3,
                4
            ],
            "name": "Arm",
            "customName": true,
            "deviceType": "MotorGroup",
            "deviceClass": "motor_group",
            "setting": {
                "fwd": "up",
                "rev": "down",
                "gear": "ratio18_1",
                "motor_a_reversed": "false",
                "motor_b_reversed": "true"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                5
            ],
            "name": "Rear_Lift",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                7
            ],
            "name": "Clip",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                8
            ],
            "name": "Front_Forklift",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1",
                "id": "partner"
            },
            "triportSourcePort": 22
        }
    ],
    "slot": 1,
    "platform": "V5",
    "sdkVersion": "20211210.18.00.00",
    "appVersion": "2.3.0",
    "fileFormat": "1.0.1",
    "icon": "",
    "targetBrainGen": "First",
    "target": "Physical"
}
=======
{
    "mode": "Text",
    "textContent": "#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 340.36, 294.64, mm, 1.3333333333333333);\n\nmotor ArmMotorA = motor(PORT3, ratio18_1, false);\nmotor ArmMotorB = motor(PORT4, ratio18_1, true);\nmotor_group Arm = motor_group(ArmMotorA, ArmMotorB);\n\nmotor Rear_Lift = motor(PORT5, ratio18_1, false);\n\nmotor Clip = motor(PORT7, ratio18_1, true);\n\nmotor Front_Forklift = motor(PORT8, ratio18_1, false);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control Clip\n      if (Controller1.ButtonL1.pressing()) {\n        Clip.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Clip.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Clip.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Arm\n      if (Controller1.ButtonR1.pressing()) {\n        Arm.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Arm.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Arm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control Rear_Lift\n      if (Controller1.ButtonUp.pressing()) {\n        Rear_Lift.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Rear_Lift.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Rear_Lift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Front_Forklift\n      if (Controller1.ButtonX.pressing()) {\n        Front_Forklift.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Front_Forklift.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Front_Forklift.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"\n\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {  \n  //Drivetrain \n  Drivetrain.setDriveVelocity(75,percent);\n  //Arm 800 Max Degrees\n  Arm.setMaxTorque(80.0, percent);\n  Arm.setVelocity(45.0, percent); \n  Arm.setStopping(hold); \n\n  //Front Forklift 800 Max Degrees\n  Front_Forklift.setVelocity(50,percent); \n  Front_Forklift.setMaxTorque(120,percent); \n  Front_Forklift.setStopping(hold); \n\n  //Rear Lift\n  Rear_Lift.setStopping(hold); \n  Rear_Lift.setVelocity(50,percent);  \n\n  //Clip\n  Clip.setVelocity(10,percent); \n  Clip.setStopping(hold);\n\n\n\n  return 0; \n\n}\n\n  //autonomus \nvoid autonomous1(){ \n  //Setup S\n  Clip.setPosition(0,degrees); \n  Rear_Lift.setPosition(0,degrees);  \n  Front_Forklift.setPosition(0,degrees);\n  Arm.setPosition(0,degrees);  \n  Drivetrain.setDriveVelocity(300,rpm);\n  //DriveTrain\n    /*Drivetrain.driveFor(reverse,8, inches); \n    Drivetrain.turnFor(right, 75, degrees); \n    Drivetrain.driveFor(reverse, 68, inches); \n    Drivetrain.driveFor(forward, 12, inches); \n    Arm.spinFor(reverse, 180, degrees); \n    Rear_Lift.spinFor(forward, 90, degrees); \n    Rear_Lift.spinFor(reverse, 90, degrees);*/\n\n\n    Clip.spinFor(forward, 110,degrees, false);\n    //Movement\n    Drivetrain.driveFor(reverse, 70, inches);\n    /*Drivetrain.turnFor(left, 45, degrees);\n    Drivetrain.driveFor(reverse, 22, inches);\n    Drivetrain.turnFor(right, 45, degrees);\n    Drivetrain.driveFor(reverse, 28, inches);*/\n    //Base Setup\n    Drivetrain.driveFor(forward, 15, inches);\n    Drivetrain.turnFor(left, 55, degrees);\n    //Preload Dump\n    Arm.spinFor(forward, 800, degrees, false);\n    Drivetrain.driveFor(forward, 7, inches);\n    Front_Forklift.spinFor(forward, 750, degrees);\n    Drivetrain.driveFor(reverse, 18, inches);\n    Drivetrain.turnFor(right, 10, degrees, false);\n    Arm.spinToPosition(0, degrees);\n    Front_Forklift.spinFor(reverse, 235, degrees);\n    Drivetrain.driveFor(forward, 26, inches);\n\n\n    \n}\n\nvoid driverControl1(){\n  whenStarted1();\n\n}\n\nint main() { \n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  whenStarted1(); \n    competition Competition; \n\n  whenStarted1(); \n  Competition.autonomous(autonomous1); \n  Competition.drivercontrol(driverControl1); \n  \n}\n",
    "textLanguage": "cpp",
    "rconfig": [
        {
            "port": [],
            "name": "Controller1",
            "customName": false,
            "deviceType": "Controller",
            "deviceClass": "controller",
            "setting": {
                "left": "Clip",
                "leftDir": "false",
                "right": "Arm",
                "rightDir": "false",
                "upDown": "Rear_Lift",
                "upDownDir": "false",
                "xB": "Front_Forklift",
                "xBDir": "false",
                "drive": "arcadel",
                "id": "primary"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                1,
                2,
                0
            ],
            "name": "Drivetrain",
            "customName": false,
            "deviceType": "Drivetrain",
            "deviceClass": "smartdrive",
            "setting": {
                "type": "2-motor",
                "wheelSize": "wheel4in",
                "gear": "ratio18_1",
                "gearRatio": "24:18",
                "direction": "fwd",
                "gyroType": "none",
                "width": "13.4",
                "unit": "in",
                "wheelbase": "11.6",
                "wheelbaseUnit": "in",
                "xOffset": "0",
                "xOffsetUnit": "mm",
                "yOffset": "0",
                "yOffsetUnit": "mm",
                "thetaOffset": "180"
            },
            "triportSourcePort": null
        },
        {
            "port": [
                3,
                4
            ],
            "name": "Arm",
            "customName": true,
            "deviceType": "MotorGroup",
            "deviceClass": "motor_group",
            "setting": {
                "fwd": "up",
                "rev": "down",
                "gear": "ratio18_1",
                "motor_a_reversed": "false",
                "motor_b_reversed": "true"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                5
            ],
            "name": "Rear_Lift",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                7
            ],
            "name": "Clip",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                8
            ],
            "name": "Front_Forklift",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1",
                "id": "partner"
            },
            "triportSourcePort": 22
        }
    ],
    "slot": 1,
    "platform": "V5",
    "sdkVersion": "20211210.18.00.00",
    "appVersion": "2.3.0",
    "fileFormat": "1.0.1",
    "icon": "",
    "targetBrainGen": "First",
    "target": "Physical"
}
>>>>>>> Stashed changes:VEX-V5/Four-Bar-Boy-1/C++/Four-Bar-1_RIght.v5cpp
