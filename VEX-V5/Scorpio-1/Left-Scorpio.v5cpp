{
    "mode": "Text",
    "textContent": "#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor Rear = motor(PORT16, ratio18_1, true);\n\nmotor Treadmill = motor(PORT15, ratio18_1, true);\n\nmotor Drivetrain0MotorA = motor(PORT11, ratio36_1, false);\nmotor Drivetrain0MotorB = motor(PORT12, ratio36_1, true);\nmotor_group Drivetrain0 = motor_group(Drivetrain0MotorA, Drivetrain0MotorB);\n\nmotor Fishook = motor(PORT13, ratio18_1, false);\n\nmotor Base = motor(PORT10, ratio18_1, true);\n\nmotor Fork = motor(PORT17, ratio18_1, true);\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Rear\n      if (Controller1.ButtonL1.pressing()) {\n        Rear.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Rear.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Rear.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Fork\n      if (Controller1.ButtonR1.pressing()) {\n        Fork.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Fork.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Fork.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control Fishook\n      if (Controller1.ButtonUp.pressing()) {\n        Fishook.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Fishook.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Fishook.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Base\n      if (Controller1.ButtonX.pressing()) {\n        Base.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Base.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Base.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint spinTrigger = 1;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain0.setVelocity(100, percent);\n  Treadmill.setVelocity(38, percent);\n  Base.setVelocity(10, percent);\n  Rear.setVelocity(70, percent);\n  Fork.setVelocity(50, percent);\n  \n  Base.setMaxTorque(50, percent);\n  Fork.setMaxTorque(100, percent);\n\n  Base.setStopping(hold);\n  Fishook.setStopping(hold);\n  Rear.setStopping(hold);\n  Fork.setStopping(hold);\n\n  return 0;\n}\n\nvoid treadSpin(){\n  Treadmill.spin(reverse);\n}\n\nvoid treadStop(){\n  Treadmill.stop();\n}\n\nvoid driverControl1(){\n  Drivetrain0.setVelocity(100, percent);\n\n  while(true){\n    \n     //Drivetrain Straight\n     Drivetrain0.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);\n\n    //Drivetrain Turning\n     while(Controller1.Axis4.position()>50){\n     Drivetrain0MotorA.spin(directionType::fwd, Controller1.Axis4.value(), velocityUnits::pct);\n     Drivetrain0MotorB.spin(directionType::rev, Controller1.Axis4.value(), velocityUnits::pct);\n     }\n     while(Controller1.Axis4.position()<-50){\n     Drivetrain0MotorA.spin(directionType::fwd, Controller1.Axis4.value(), velocityUnits::pct);\n     Drivetrain0MotorB.spin(directionType::rev, Controller1.Axis4.value(), velocityUnits::pct);\n     }\n      Controller1.ButtonA.pressed(treadSpin);\n      Controller1.ButtonY.pressed(treadStop);\n  }\n}\n\nvoid autonomous1(){\n  //setup\n  Drivetrain0.setVelocity(100, rpm);\n  Rear.setPosition(0, degrees);\n  Rear.spinFor(forward, 445, degrees);\n  treadSpin();\n\n  //grab yellow base\n  Fork.setVelocity(100, percent);\n  Fork.spinFor(reverse, 1400, degrees, false);\n\n  Drivetrain0MotorB.setVelocity(90, rpm);\n  Drivetrain0.spinFor(forward, 2.75, seconds);\n  Fork.spinFor(forward, 0.7, seconds);\n  Drivetrain0MotorB.setVelocity(100, rpm);\n\n  //grab blue base\n  Drivetrain0.spinFor(reverse, 2.3, seconds);\n  Drivetrain0MotorB.spinFor(forward, 0.75, seconds);\n  Drivetrain0MotorA.spinFor(reverse, 0.5, seconds);\n  Drivetrain0.spinFor(reverse, 1.2, seconds);\n  Base.spinFor(forward, 0.30, seconds);\n  Fishook.spinFor(reverse, 0.30, seconds);\n\n  //grab rings\n  Drivetrain0.spinFor(forward, 0.5, seconds);\n  Drivetrain0MotorB.spinFor(forward, 0.75, seconds);\n  Drivetrain0MotorA.spinFor(reverse, 0.75, seconds);\n  Drivetrain0MotorB.setVelocity(25, rpm); //this allows the robot to make a wider right turn\n  Drivetrain0.spinFor(forward, 1.5, seconds);\n  wait(0.2, seconds);\n  Drivetrain0.setVelocity(100, rpm);\n  Drivetrain0.spinFor(forward, 2.26, seconds);\n\n  Fork.setVelocity(50, percent);\n}\n\nint main() {\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  \n\n  whenStarted1();\n\n  competition Competition;\n\n  Competition.autonomous(autonomous1);\n  Competition.drivercontrol(driverControl1);\n}",
    "textLanguage": "cpp",
    "rconfig": [
        {
            "port": [],
            "name": "Controller1",
            "customName": false,
            "deviceType": "Controller",
            "deviceClass": "controller",
            "setting": {
                "left": "Rear",
                "leftDir": "false",
                "right": "Fork",
                "rightDir": "false",
                "upDown": "Fishook",
                "upDownDir": "false",
                "xB": "Base",
                "xBDir": "true",
                "drive": "none",
                "id": "primary"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                16
            ],
            "name": "Rear",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                15
            ],
            "name": "Treadmill",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                11,
                12
            ],
            "name": "Drivetrain0",
            "customName": true,
            "deviceType": "MotorGroup",
            "deviceClass": "motor_group",
            "setting": {
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio36_1",
                "motor_a_reversed": "false",
                "motor_b_reversed": "true"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                13
            ],
            "name": "Fishook",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                10
            ],
            "name": "Base",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                17
            ],
            "name": "Fork",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        }
    ],
    "slot": 1,
    "platform": "V5",
    "sdkVersion": "20211210.18.00.00",
    "appVersion": "2.3.0",
    "fileFormat": "1.0.1",
    "icon": "",
    "targetBrainGen": "First",
    "target": "Physical"
}